@model IEnumerable<Sd_System.Models.Ticket>
@{
    ViewData["Title"] = "Wszystkie zgłoszenia";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>@ViewData["Title"]</h2>

    <div class="d-flex gap-1 align-items-center">
        <form asp-action="Index" method="get" class="d-flex gap-1">
            <div class="input-group input-group-sm">
                <select class="form-select form-select-sm"
                        name="priorityFilter"
                        asp-items="Html.GetEnumSelectList<TicketPriority>()">
                    <option value="">Wszystkie</option>
                </select>
                <button type="submit" class="btn btn-primary btn-sm">
                    <i class="bi bi-funnel" style="font-size: 0.8rem"></i>
                </button>
                <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-arrow-counterclockwise" style="font-size: 0.8rem"></i>
                </a>
            </div>
        </form>
    </div>
</div>

    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>Tytuł</th>
                    <th>Status</th>
                    <th>Priorytet</th>
                    <th>Autor</th>
                    <th>
                        <a asp-action="Index"
                           asp-route-sortOrder="@ViewData["DateSortParam"]"
                           asp-route-priorityFilter="@ViewData["CurrentPriorityFilter"]">
                            Data utworzenia
                            @if (ViewData["DateSortParam"]?.ToString() == "date_asc")
                            {
                                <i class="bi bi-sort-down"></i>
                            }
                            else
                            {
                                <i class="bi bi-sort-down-alt"></i>
                            }
                        </a>
                    </th>
                    <th>Czas do końca</th>
                </tr>
            </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Title</td>
                    <td>
                        @switch (item.Status)
                        {
                            case TicketStatus.New:
                                <span class="badge bg-primary">Nowy</span>
                                break;
                            case TicketStatus.InProgress:
                                <span class="badge bg-warning">W trakcie</span>
                                break;
                            case TicketStatus.Resolved:
                                <span class="badge bg-success">Rozwiązany</span>
                                break;
                            case TicketStatus.Closed:
                                <span class="badge bg-secondary">Zamknięty</span>
                                break;
                        }
                    </td>
                    <td>
                        @switch (item.Priority)
                        {
                            case TicketPriority.P1:
                                <span class="badge bg-danger">P1 (24h)</span>
                                break;
                            case TicketPriority.P2:
                                <span class="badge bg-warning">P2 (48h)</span>
                                break;
                            case TicketPriority.P3:
                                <span class="badge bg-info">P3 (96h)</span>
                                break;
                            case TicketPriority.P4:
                                <span class="badge bg-primary">P4 (240h)</span>
                                break;
                            case TicketPriority.P5:
                                <span class="badge bg-success">P5 (bezterminowo)</span>
                                break;
                        }
                    </td>
                    <td>@item.CreatedBy?.FullName</td>
                    <td>@item.CreatedDate.ToString("dd.MM.yyyy HH:mm")</td>
                    <td>
                        @if (item.Status == TicketStatus.Resolved || item.Status == TicketStatus.Closed)
                        {
                            <span class="text-success">
                                Zakończono
                            </span>
                        }
                        else
                        {
                            @if (item.DueDate.HasValue)
                            {
                                var timeLeft = item.DueDate.Value - DateTime.Now;
                                if (timeLeft.TotalSeconds > 0)
                                {
                                    <span>@($"{timeLeft.Days}d {timeLeft.Hours}h")</span>
                                }
                                else
                                {
                                    <span class="text-danger">Termin przekroczony!</span>
                                }
                            }
                            else
                            {
                                <span>∞</span>
                            }
                        }
                    </td>
                    <td style="white-space: nowrap;">
                        <div class="d-flex gap-1">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm py-0">Edytuj</a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm py-0">Szczegóły</a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm py-0">Usuń</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@functions {
    string GetStatusClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.New => "status-new",
            TicketStatus.InProgress => "status-inprogress",
            TicketStatus.Resolved => "status-resolved",
            TicketStatus.Closed => "status-closed",
            _ => ""
        };
    }

    string GetPriorityClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.P1 => "priority-p1",
            TicketPriority.P2 => "priority-p2",
            TicketPriority.P3 => "priority-p3",
            TicketPriority.P4 => "priority-p4",
            TicketPriority.P5 => "priority-p5",
            _ => ""
        };
    }

    string FormatTimeLeft(TimeSpan timeLeft)
    {
        var days = timeLeft.Days;
        var hours = timeLeft.Hours;

        var result = new List<string>();
        if (days > 0) result.Add($"{days} dni");
        if (hours > 0) result.Add($"{hours} godzin");

        return result.Count > 0
            ? string.Join(", ", result)
            : "Mniej niż 1 godzina";
    }
}